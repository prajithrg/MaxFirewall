package com.maxeler.examples.firewall;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.networking.v1.framed_kernels.FramedLinkType;

public class OutFirewallKernel extends Kernel {

	public static final String INPUT = "frameIn";
	public static final String OUTPUT = "frameOut";

	OutFirewallKernel(KernelParameters parameters, FramedLinkType rxLinkType, FramedLinkType txLinkType) {
		super(parameters);

		flush.disabled();

		NonBlockingInput<DFEStruct> input = io.nonBlockingInput(INPUT,
				rxLinkType.getDFEStructType(),
				rxLinkType.getDFEStructType().getPositionForField(rxLinkType.getEOF()));

		/*
		 * Drop UDP for a particular port
		 */

		DFEVar valid = input.valid;
		DFEVar wordData = input.data[rxLinkType.getData()];
		DFEVar isStart = input.valid & (DFEVar)input.data[rxLinkType.getSOF()];

		FieldDesc ETHERTYPE = new FieldDesc(dfeUInt(16), 12);
		FieldDesc IPPROTO = new FieldDesc(dfeUInt(8), 14+9);

		//			FieldDesc SRC_UDP_PORT = new FieldDesc(dfeUInt(16), 34);
		FieldDesc DST_UDP_PORT = new FieldDesc(dfeUInt(16), 36);

		DFEVar etherType = captureField(isStart, wordData, ETHERTYPE);
		DFEVar ipProtocol = captureField(isStart, wordData, IPPROTO);
		DFEVar dstPort = captureField(isStart, wordData, DST_UDP_PORT);

		// User provided Transport Protocol & Destination Port
		DFEVar protocol = io.scalarInput("outIPProtocol", dfeUInt(8));
		DFEVar port = io.scalarInput("outDstPort", dfeUInt(16));

		/*
		 * Output Firewall Rule
		 * Drop the frame if it is a (IPv4 & Specified Transport Protocol & Specified Destination Port)
		 */
		DFEVar shouldDrop = byteReverse(etherType) === 0x0800; // ETHERTYPE_IP
		shouldDrop = shouldDrop & (ipProtocol === protocol); // IPPROTO_UDP
		shouldDrop = shouldDrop & (byteReverse(dstPort) === port); // port is in Big Endian

		DFEStruct outputStruct = txLinkType.getDFEStructType().newInstance(this);
		outputStruct[txLinkType.getData()] <== wordData;
		outputStruct[txLinkType.getSOF()] <== input.data[rxLinkType.getSOF()];
		outputStruct[txLinkType.getEOF()] <== input.data[rxLinkType.getEOF()];
		outputStruct[txLinkType.getMod()] <== input.data[rxLinkType.getMod()];

		DFEVar frameCount = control.count.makeCounter(
				control.count.makeParams(64)
				.withEnable(isStart)
				.withInitValue(0)
		).getCount();

		debug.simPrintf(isStart, "OUT Frame [%d]: etherType = 0x%x, ipProtocol = %d, dstPort = %d --> Dropped: %d\n",
				frameCount,
				byteReverse(etherType), ipProtocol, byteReverse(dstPort),
				shouldDrop);


		io.output(OUTPUT, txLinkType.getDFEStructType(), valid & ~shouldDrop) <== outputStruct;
	}

	private static DFEVar byteReverse(DFEVar v) {
		int size = v.getType().getTotalBits() / 8;

		DFEVar r = null;

		for (int i=0; i < size; i++) {
			DFEVar b = v.slice(i*8, 8);
			if (i == 0) r = b;
			else r = r # b;
		}

		return r.cast(v.getType());
	}

	private static class FieldDesc {
		private final int offset;
		private final DFEType type;

		public FieldDesc(DFEType type, int offset) {
			this.type = type;
			this.offset = offset;
		}

		public DFEType getType() { return type; }
		public int getByteOffset() { return offset; }
	}

	public DFEVar captureField(DFEVar isStart, DFEVar data, FieldDesc field) {
		int wordSizeBytes = data.getType().getTotalBits() / 8;
		int fieldSizeBytes = field.getType().getTotalBits() / 8;
		int offsetMod = field.getByteOffset() % wordSizeBytes;
		int fieldSizeWords = MathUtils.ceilDivide(fieldSizeBytes, wordSizeBytes) + (offsetMod + fieldSizeBytes > wordSizeBytes ? 1 : 0);
		int startWord = field.getByteOffset() / wordSizeBytes;


		DFEVar theWord = stream.offset(data, startWord);

		for (int w=1; w < fieldSizeWords; w++) {
			theWord = stream.offset(data, startWord + w) # theWord;
		}

		DFEVar theField = theWord.slice(offsetMod * 8, fieldSizeBytes * 8);
		theField = Reductions.streamHold(theField, isStart);

		return theField.cast(field.getType());
	}

}




