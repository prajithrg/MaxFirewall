package com.maxeler.examples.firewall;


import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.kernel_types.EthernetRXType;
import com.maxeler.networking.v1.kernel_types.EthernetTXType;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.EthernetChecksumMode;
import com.maxeler.networking.v1.managers.netlib.EthernetStream;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;


public class FirewallManager extends NetworkManager {

	public FirewallManager(final FirewallEngineParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(params.hasStreamStatus()));

		EthernetStream ethTop1 = addEthernetStream("ethTop1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, EthernetChecksumMode.FlagOnEOF);
		EthernetStream ethBot1 = addEthernetStream("ethBot1", Max4NetworkConnection.QSFP_BOT_10G_PORT1, EthernetChecksumMode.FlagOnEOF);

		ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);

		DFELink top1EthRx = ethTop1.getReceiveStream();
		DFELink top1EthTx = ethTop1.getTransmitStream();

		DFELink bot1EthTx = ethBot1.getTransmitStream();
		DFELink bot1EthRx = ethBot1.getReceiveStream();

		EthernetRXType rxLinkType = new EthernetRXType();
		EthernetTXType txLinkType = new EthernetTXType();

		KernelBlock inputKernel = addKernel(new InFirewallKernel(makeKernelParameters("inFirewallKernel"), rxLinkType, txLinkType));
		inputKernel.getInput(InFirewallKernel.INPUT) <== top1EthRx;
		bot1EthTx <== inputKernel.getOutput(InFirewallKernel.OUTPUT);

		KernelBlock outputKernel = addKernel(new OutFirewallKernel(makeKernelParameters("outFirewallKernel"), rxLinkType, txLinkType));
		outputKernel.getInput(OutFirewallKernel.INPUT) <== bot1EthRx;
		top1EthTx <== outputKernel.getOutput(OutFirewallKernel.OUTPUT);

	}

	public static void main(final String[] args) {
		final FirewallEngineParameters params = new FirewallEngineParameters(args);
		final FirewallManager manager = new FirewallManager(params);

		final BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}
